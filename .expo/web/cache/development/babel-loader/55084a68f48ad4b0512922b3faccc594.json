{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport getRandomChar from \"../constants/characters\";\nvar width = Dimensions.get(\"window\").width;\nvar height = Dimensions.get(\"window\").height;\nvar colors = [\"red\", \"green\", \"blue\", \"orange\"];\nvar maxCount = 2;\nexport default function App() {\n  var _useState = useState(getRandomChar()),\n      _useState2 = _slicedToArray(_useState, 2),\n      letters = _useState2[0],\n      setLetters = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      clickCounter = _useState4[0],\n      setClickCounter = _useState4[1];\n\n  var onClick = function onClick(currentItem) {\n    var newD;\n\n    if (clickCounter < maxCount) {\n      newD = letters.map(function (inItem) {\n        if (currentItem.id == inItem.id) {\n          inItem.show = !inItem.show;\n        }\n\n        return inItem;\n      });\n    }\n\n    setLetters(newD);\n    setClickCounter(clickCounter + 1);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, letters.map(function (item) {\n    return React.createElement(TouchableOpacity, {\n      key: item.id,\n      onPress: function onPress() {\n        return onClick(item);\n      }\n    }, React.createElement(View, {\n      style: styles.card\n    }, React.createElement(Text, {\n      style: _objectSpread(_objectSpread({}, styles.text), {}, {\n        opacity: item.show ? 1 : 0\n      })\n    }, item.text)));\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    marginTop: 20,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\"\n  },\n  card: {\n    width: width / 4.5,\n    height: (height - 60) / 4,\n    backgroundColor: \"green\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: 5\n  },\n  text: {\n    fontSize: 50\n  }\n});","map":{"version":3,"sources":["C:/projects/my_projects/leap.club-android-game-assignment/src/view/App.js"],"names":["React","useState","TouchableOpacity","getRandomChar","width","Dimensions","get","height","colors","maxCount","App","letters","setLetters","clickCounter","setClickCounter","onClick","currentItem","newD","map","inItem","id","show","styles","container","item","card","text","opacity","StyleSheet","create","display","marginTop","flexDirection","flexWrap","backgroundColor","justifyContent","alignItems","margin","fontSize"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAOC,aAAP;AAEA,IAAMC,KAAK,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAAvC;AACA,IAAMG,MAAM,GAAGF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAAxC;AAEA,IAAMC,MAAM,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,QAAzB,CAAf;AACA,IAAMC,QAAQ,GAAG,CAAjB;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAA8BT,QAAQ,CAACE,aAAa,EAAd,CAAtC;AAAA;AAAA,MAAOQ,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAwCX,QAAQ,CAAC,CAAD,CAAhD;AAAA;AAAA,MAAOY,YAAP;AAAA,MAAqBC,eAArB;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,WAAD,EAAiB;AAC/B,QAAIC,IAAJ;;AACA,QAAIJ,YAAY,GAAGJ,QAAnB,EAA6B;AAC3BQ,MAAAA,IAAI,GAAGN,OAAO,CAACO,GAAR,CAAY,UAACC,MAAD,EAAY;AAC7B,YAAIH,WAAW,CAACI,EAAZ,IAAkBD,MAAM,CAACC,EAA7B,EAAiC;AAC/BD,UAAAA,MAAM,CAACE,IAAP,GAAc,CAACF,MAAM,CAACE,IAAtB;AACD;;AACD,eAAOF,MAAP;AACD,OALM,CAAP;AAMD;;AAEDP,IAAAA,UAAU,CAACK,IAAD,CAAV;AACAH,IAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACD,GAbD;;AAeA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAES,MAAM,CAACC;AAApB,KACGZ,OAAO,CAACO,GAAR,CAAY,UAACM,IAAD;AAAA,WACX,oBAAC,gBAAD;AAAkB,MAAA,GAAG,EAAEA,IAAI,CAACJ,EAA5B;AAAgC,MAAA,OAAO,EAAE;AAAA,eAAML,OAAO,CAACS,IAAD,CAAb;AAAA;AAAzC,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEF,MAAM,CAACG;AAApB,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,kCAAOH,MAAM,CAACI,IAAd;AAAoBC,QAAAA,OAAO,EAAEH,IAAI,CAACH,IAAL,GAAY,CAAZ,GAAgB;AAA7C;AAAX,OACGG,IAAI,CAACE,IADR,CADF,CADF,CADW;AAAA,GAAZ,CADH,CADF;AAaD;AAED,IAAMJ,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,SAAS,EAAE,EAFF;AAGTC,IAAAA,aAAa,EAAE,KAHN;AAITC,IAAAA,QAAQ,EAAE;AAJD,GADoB;AAO/BR,EAAAA,IAAI,EAAE;AACJrB,IAAAA,KAAK,EAAEA,KAAK,GAAG,GADX;AAEJG,IAAAA,MAAM,EAAE,CAACA,MAAM,GAAG,EAAV,IAAgB,CAFpB;AAGJ2B,IAAAA,eAAe,EAAE,OAHb;AAIJC,IAAAA,cAAc,EAAE,QAJZ;AAKJC,IAAAA,UAAU,EAAE,QALR;AAMJC,IAAAA,MAAM,EAAE;AANJ,GAPyB;AAe/BX,EAAAA,IAAI,EAAE;AACJY,IAAAA,QAAQ,EAAE;AADN;AAfyB,CAAlB,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Dimensions, StyleSheet, Text, View } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport getRandomChar from \"../constants/characters\";\n\nconst width = Dimensions.get(\"window\").width;\nconst height = Dimensions.get(\"window\").height;\n\nconst colors = [\"red\", \"green\", \"blue\", \"orange\"];\nconst maxCount = 2;\n\nexport default function App() {\n  const [letters, setLetters] = useState(getRandomChar());\n  const [clickCounter, setClickCounter] = useState(0);\n\n  const onClick = (currentItem) => {\n    let newD;\n    if (clickCounter < maxCount) {\n      newD = letters.map((inItem) => {\n        if (currentItem.id == inItem.id) {\n          inItem.show = !inItem.show;\n        }\n        return inItem;\n      });\n    }\n\n    setLetters(newD);\n    setClickCounter(clickCounter + 1);\n  };\n\n  return (\n    <View style={styles.container}>\n      {letters.map((item) => (\n        <TouchableOpacity key={item.id} onPress={() => onClick(item)}>\n          <View style={styles.card}>\n            <Text style={{ ...styles.text, opacity: item.show ? 1 : 0 }}>\n              {item.text}\n            </Text>\n          </View>\n        </TouchableOpacity>\n      ))}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    marginTop: 20,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n  },\n  card: {\n    width: width / 4.5,\n    height: (height - 60) / 4,\n    backgroundColor: \"green\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: 5,\n  },\n  text: {\n    fontSize: 50,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}