{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { getRandomChar, maxCount } from \"../constants/memoryDef\";\nimport { getHeight, getWidth } from \"../utils/utilityFunc\";\nexport default function App() {\n  var _useState = useState(getRandomChar()),\n      _useState2 = _slicedToArray(_useState, 2),\n      letters = _useState2[0],\n      setLetters = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      matchIndexs = _useState4[0],\n      setMatchedIndexs = _useState4[1];\n\n  var onClick = function onClick(item, newIndex) {\n    if (!item.matched && matchIndexs.length < 2) {\n      var newItems = matchIndexs;\n\n      if (matchIndexs.length < maxCount) {\n        newItems = _toConsumableArray(letters);\n        newItems[newIndex].show = !newItems[newIndex].show;\n      }\n\n      if (matchIndexs.length === maxCount - 1) {\n        var _matchIndexs = _slicedToArray(matchIndexs, 1),\n            oldIndex = _matchIndexs[0];\n\n        if (letters[oldIndex].text === letters[newIndex].text) {\n          newItems = _toConsumableArray(letters);\n          newItems[oldIndex].matched = true;\n          newItems[newIndex].matched = true;\n        }\n\n        setTimeout(function () {\n          newItems = _toConsumableArray(letters);\n\n          if (!newItems[oldIndex].matched && !newItems[oldIndex].matched) {\n            newItems[oldIndex].show = false;\n            newItems[newIndex].show = false;\n          }\n\n          setMatchedIndexs([]);\n        }, 500);\n      }\n\n      setLetters(newItems);\n      setMatchedIndexs(matchIndexs.concat(newIndex));\n    }\n  };\n\n  var renderItem = function renderItem(item, index) {\n    return React.createElement(TouchableOpacity, {\n      key: item.id,\n      onPress: function onPress() {\n        return onClick(item, index);\n      }\n    }, React.createElement(View, {\n      style: styles.card\n    }, React.createElement(Text, {\n      style: _objectSpread(_objectSpread({}, styles.text), {}, {\n        opacity: item.show ? 1 : 0\n      })\n    }, item.matched ? \"ðŸ¥³\" : item.text)));\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container\n  }, letters.map(renderItem));\n}\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    marginTop: 20,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\"\n  },\n  card: {\n    width: getWidth() / 4.5,\n    height: (getHeight() - 60) / 4,\n    backgroundColor: \"#C216F5\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: 5\n  },\n  text: {\n    fontSize: 50\n  }\n});","map":{"version":3,"sources":["C:/projects/my_projects/leap.club-android-game-assignment/src/view/App.js"],"names":["React","useState","TouchableOpacity","getRandomChar","maxCount","getHeight","getWidth","App","letters","setLetters","matchIndexs","setMatchedIndexs","onClick","item","newIndex","matched","length","newItems","show","oldIndex","text","setTimeout","concat","renderItem","index","id","styles","card","opacity","container","map","StyleSheet","create","display","marginTop","flexDirection","flexWrap","width","height","backgroundColor","justifyContent","alignItems","margin","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { SafeAreaView, StyleSheet, Text, View } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { getRandomChar, maxCount } from \"../constants/memoryDef\";\nimport { getHeight, getWidth } from \"../utils/utilityFunc\";\n\nexport default function App() {\n  const [letters, setLetters] = useState(getRandomChar());\n  const [matchIndexs, setMatchedIndexs] = useState([]);\n\n  const onClick = (item, newIndex) => {\n    if (!item.matched && matchIndexs.length < 2) {\n      let newItems = matchIndexs;\n      if (matchIndexs.length < maxCount) {\n        newItems = [...letters];\n        newItems[newIndex].show = !newItems[newIndex].show;\n      }\n\n      if (matchIndexs.length === maxCount - 1) {\n        const [oldIndex] = matchIndexs;\n        if (letters[oldIndex].text === letters[newIndex].text) {\n          newItems = [...letters];\n          newItems[oldIndex].matched = true;\n          newItems[newIndex].matched = true;\n        }\n        setTimeout(() => {\n          newItems = [...letters];\n          if (!newItems[oldIndex].matched && !newItems[oldIndex].matched) {\n            newItems[oldIndex].show = false;\n            newItems[newIndex].show = false;\n          }\n\n          setMatchedIndexs([]);\n        }, 500);\n      }\n      setLetters(newItems);\n      setMatchedIndexs(matchIndexs.concat(newIndex));\n    }\n  };\n\n  const renderItem = (item, index) => {\n    return (\n      <TouchableOpacity key={item.id} onPress={() => onClick(item, index)}>\n        <View style={styles.card}>\n          <Text style={{ ...styles.text, opacity: item.show ? 1 : 0 }}>\n            {item.matched ? \"ðŸ¥³\" : item.text}\n          </Text>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {letters.map(renderItem)}\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    marginTop: 20,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n  },\n  card: {\n    width: getWidth() / 4.5,\n    height: (getHeight() - 60) / 4,\n    backgroundColor: \"#C216F5\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: 5,\n  },\n  text: {\n    fontSize: 50,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}