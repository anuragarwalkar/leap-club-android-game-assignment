{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { getRandomChar, maxCount } from \"../constants/memoryDef\";\nimport { getHeight, getWidth } from \"../utils/utilityFunc\";\nexport default function App() {\n  var _useState = useState(getRandomChar()),\n      _useState2 = _slicedToArray(_useState, 2),\n      letters = _useState2[0],\n      setLetters = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      matchIndexs = _useState4[0],\n      setMatchedIndexs = _useState4[1];\n\n  var onClick = function onClick(newIndex) {\n    var newItems = matchIndexs;\n\n    if (matchIndexs.length < maxCount) {\n      newItems = _toConsumableArray(letters);\n      newItems[newIndex].show = !newItems[newIndex].show;\n    }\n\n    if (matchIndexs.length === maxCount - 1) {\n      var _matchIndexs = _slicedToArray(matchIndexs, 1),\n          oldIndex = _matchIndexs[0];\n\n      if (letters[oldIndex].text === letters[newIndex].text) {\n        newItems = _toConsumableArray(letters);\n        newItems[oldIndex].matched = true;\n        newItems[newIndex].matched = true;\n      }\n\n      setTimeout(function () {\n        newItems = _toConsumableArray(letters);\n\n        if (!newItems[oldIndex].matched && !newItems[oldIndex].matched) {\n          newItems[oldIndex].show = false;\n          newItems[newIndex].show = false;\n        }\n\n        setMatchedIndexs([]);\n      }, 500);\n    }\n\n    setLetters(newItems);\n    setMatchedIndexs(matchIndexs.concat(newIndex));\n  };\n\n  var renderItem = function renderItem(item, index) {\n    return React.createElement(TouchableOpacity, {\n      key: item.id,\n      onPress: function onPress() {\n        return !item.matched && onClick(index);\n      }\n    }, React.createElement(View, {\n      style: styles.card\n    }, React.createElement(Text, {\n      style: _objectSpread(_objectSpread({}, styles.text), {}, {\n        opacity: item.show ? 1 : 0\n      })\n    }, item.matched ? \"ðŸ¥³\" : item.text)));\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container\n  }, letters.map(renderItem));\n}\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    marginTop: 20,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\"\n  },\n  card: {\n    width: getWidth() / 4.5,\n    height: (getHeight() - 60) / 4,\n    backgroundColor: \"#ADD8E6\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: 5\n  },\n  text: {\n    fontSize: 50\n  }\n});","map":{"version":3,"sources":["C:/projects/my_projects/leap.club-android-game-assignment/src/view/App.js"],"names":["React","useState","TouchableOpacity","getRandomChar","maxCount","getHeight","getWidth","App","letters","setLetters","matchIndexs","setMatchedIndexs","onClick","newIndex","newItems","length","show","oldIndex","text","matched","setTimeout","concat","renderItem","item","index","id","styles","card","opacity","container","map","StyleSheet","create","display","marginTop","flexDirection","flexWrap","width","height","backgroundColor","justifyContent","alignItems","margin","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { SafeAreaView, StyleSheet, Text, View } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { getRandomChar, maxCount } from \"../constants/memoryDef\";\nimport { getHeight, getWidth } from \"../utils/utilityFunc\";\n\nexport default function App() {\n  const [letters, setLetters] = useState(getRandomChar());\n  const [matchIndexs, setMatchedIndexs] = useState([]);\n\n  const onClick = (newIndex) => {\n    let newItems = matchIndexs;\n    if (matchIndexs.length < maxCount) {\n      newItems = [...letters];\n      newItems[newIndex].show = !newItems[newIndex].show;\n    }\n\n    if (matchIndexs.length === maxCount - 1) {\n      const [oldIndex] = matchIndexs;\n      if (letters[oldIndex].text === letters[newIndex].text) {\n        newItems = [...letters];\n        newItems[oldIndex].matched = true;\n        newItems[newIndex].matched = true;\n      }\n      setTimeout(() => {\n        newItems = [...letters];\n        if (!newItems[oldIndex].matched && !newItems[oldIndex].matched) {\n          newItems[oldIndex].show = false;\n          newItems[newIndex].show = false;\n        }\n\n        setMatchedIndexs([]);\n      }, 500);\n    }\n\n    setLetters(newItems);\n    setMatchedIndexs(matchIndexs.concat(newIndex));\n  };\n\n  const renderItem = (item, index) => {\n    return (\n      <TouchableOpacity\n        key={item.id}\n        onPress={() => !item.matched && onClick(index)}\n      >\n        <View style={styles.card}>\n          <Text style={{ ...styles.text, opacity: item.show ? 1 : 0 }}>\n            {item.matched ? \"ðŸ¥³\" : item.text}\n          </Text>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {letters.map(renderItem)}\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    marginTop: 20,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n  },\n  card: {\n    width: getWidth() / 4.5,\n    height: (getHeight() - 60) / 4,\n    backgroundColor: \"#ADD8E6\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: 5,\n  },\n  text: {\n    fontSize: 50,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}