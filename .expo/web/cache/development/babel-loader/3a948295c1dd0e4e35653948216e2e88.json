{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { useState } from 'react';\nvar width = Dimensions.get('window').width;\nvar height = Dimensions.get('window').height;\nvar colors = ['red', 'green', 'blue', 'orange'];\nexport default function App() {\n  var _useState = useState([{\n    id: 1,\n    text: 'A',\n    show: false\n  }, {\n    id: 2,\n    text: 'B',\n    show: false\n  }, {\n    id: 3,\n    text: 'C',\n    show: false\n  }, {\n    id: 4,\n    text: 'D',\n    show: false\n  }, {\n    id: 5,\n    text: 'E',\n    show: false\n  }, {\n    id: 6,\n    text: 'F',\n    show: false\n  }, {\n    id: 7,\n    text: 'G',\n    show: false\n  }, {\n    id: 8,\n    text: 'H',\n    show: false\n  }]),\n      _useState2 = _slicedToArray(_useState, 2),\n      letters = _useState2[0],\n      setLetters = _useState2[1];\n\n  return React.createElement(View, {\n    style: styles.container\n  }, letters.map(function (item) {\n    return React.createElement(TouchableOpacity, {\n      key: item.id,\n      onPress: function onPress() {\n        var newD = letters.map(function (inItem) {\n          if (item.id == inItem.id) {\n            inItem.show = !inItem.show;\n          }\n\n          return inItem;\n        });\n        setLetters(newD);\n      }\n    }, React.createElement(View, {\n      style: styles().card\n    }, React.createElement(Text, {\n      style: _objectSpread(_objectSpread({}, styles.text), {}, {\n        opacity: item.show ? 1 : 0\n      })\n    }, item.text)));\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    marginTop: 40,\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  card: {\n    width: width / 4.5,\n    height: height / 4,\n    backgroundColor: 'green',\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 5\n  },\n  text: {\n    fontSize: 50\n  }\n});","map":{"version":3,"sources":["C:/projects/my_projects/leap.club-android-game-assignment/src/view/App.js"],"names":["StatusBar","React","TouchableOpacity","useState","width","Dimensions","get","height","colors","App","id","text","show","letters","setLetters","styles","container","map","item","newD","inItem","card","opacity","StyleSheet","create","display","marginTop","flexDirection","flexWrap","backgroundColor","justifyContent","alignItems","margin","fontSize"],"mappings":";;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;AAGA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAAUC,QAAV,QAA0B,OAA1B;AAGA,IAAMC,KAAK,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAAvC;AACA,IAAMG,MAAM,GAAGF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAAxC;AAEA,IAAMC,MAAM,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,QAAzB,CAAf;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAA8BN,QAAQ,CAAC,CAAC;AAACO,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAC,GAAb;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAAD,EAAiC;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAC,GAAb;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAAjC,EAAiE;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAC,GAAb;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAAjE,EAAgG;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAC,GAAb;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAAhG,EAA+H;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAC,GAAb;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAA/H,EAA+J;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAC,GAAb;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAA/J,EAA+L;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAC,GAAb;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAA/L,EAA+N;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAC,GAAb;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAA/N,CAAD,CAAtC;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC;AAApB,KACGH,OAAO,CAACI,GAAR,CAAY,UAACC,IAAD;AAAA,WAAU,oBAAC,gBAAD;AAAkB,MAAA,GAAG,EAAEA,IAAI,CAACR,EAA5B;AAAiC,MAAA,OAAO,EAAE,mBAAM;AACnE,YAAMS,IAAI,GAAGN,OAAO,CAACI,GAAR,CAAY,UAACG,MAAD,EAAY;AACnC,cAAGF,IAAI,CAACR,EAAL,IAAWU,MAAM,CAACV,EAArB,EAAyB;AACvBU,YAAAA,MAAM,CAACR,IAAP,GAAc,CAACQ,MAAM,CAACR,IAAtB;AACD;;AACD,iBAAOQ,MAAP;AACD,SALY,CAAb;AAMAN,QAAAA,UAAU,CAACK,IAAD,CAAV;AACD;AARoB,OASvB,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEJ,MAAM,GAAGM;AAAtB,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,kCAAMN,MAAM,CAACJ,IAAb;AAAmBW,QAAAA,OAAO,EAAEJ,IAAI,CAACN,IAAL,GAAY,CAAZ,GAAe;AAA3C;AAAX,OAA4DM,IAAI,CAACP,IAAjE,CADF,CATuB,CAAV;AAAA,GAAZ,CADH,CADF;AAiBD;AAED,IAAMI,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,SAAS,EAAE,EAFF;AAGTC,IAAAA,aAAa,EAAE,KAHN;AAITC,IAAAA,QAAQ,EAAC;AAJA,GADoB;AAO/BP,EAAAA,IAAI,EAAE;AACJjB,IAAAA,KAAK,EAAEA,KAAK,GAAE,GADV;AAEJG,IAAAA,MAAM,EAAEA,MAAM,GAAE,CAFZ;AAGJsB,IAAAA,eAAe,EAAE,OAHb;AAIJC,IAAAA,cAAc,EAAE,QAJZ;AAKJC,IAAAA,UAAU,EAAE,QALR;AAMJC,IAAAA,MAAM,EAAE;AANJ,GAPyB;AAe/BrB,EAAAA,IAAI,EAAE;AACJsB,IAAAA,QAAQ,EAAE;AADN;AAfyB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Dimensions } from 'react-native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport  { useState } from 'react';\n\n\nconst width = Dimensions.get('window').width;\nconst height = Dimensions.get('window').height;\n\nconst colors = ['red', 'green', 'blue', 'orange'];\n\nexport default function App() {\n  const [letters, setLetters] = useState([{id: 1, text:'A', show: false}, {id: 2, text:'B', show: false}, {id: 3, text:'C', show: false},{id: 4, text:'D', show: false},{id: 5, text:'E', show: false}, {id: 6, text:'F', show: false}, {id: 7, text:'G', show: false}, {id: 8, text:'H', show: false}])\n\n  return (\n    <View style={styles.container}>\n      {letters.map((item) => <TouchableOpacity key={item.id}  onPress={() => {\n          const newD = letters.map((inItem) => {\n            if(item.id == inItem.id) {\n              inItem.show = !inItem.show;\n            }\n            return inItem;\n          });\n          setLetters(newD);\n        }}>\n      <View style={styles().card} >\n        <Text style={{...styles.text, opacity: item.show ? 1: 0}} >{item.text}</Text>\n      </View>\n        </TouchableOpacity>)}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    marginTop: 40,\n    flexDirection: 'row', \n    flexWrap:'wrap'\n  },\n  card: {\n    width: width /4.5,\n    height: height /4,\n    backgroundColor: 'green',\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 5\n  },\n  text: {\n    fontSize: 50,\n  }\n});\n\n"]},"metadata":{},"sourceType":"module"}