{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React,{useState}from\"react\";import Button from\"react-native-web/dist/exports/Button\";import SafeAreaView from\"react-native-web/dist/exports/SafeAreaView\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import{TouchableOpacity}from\"react-native-gesture-handler\";import{clone,getRandomChar,maxCount}from\"../../constants/memoryDef\";import styles from\"./styles\";export default function App(){var _useState=useState(getRandomChar()),_useState2=_slicedToArray(_useState,2),letters=_useState2[0],setLetters=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),matchIndexs=_useState4[0],setMatchedIndexs=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),matchedCount=_useState6[0],setMatchedCount=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),turnsCount=_useState8[0],setTurnsCount=_useState8[1];var onClick=function onClick(item,newIndex){if(!item.matched&&matchIndexs.length<2&&newIndex!=matchIndexs[0]){var newItems=matchIndexs;if(matchIndexs.length<maxCount){newItems=clone(letters);newItems[newIndex].show=!newItems[newIndex].show;}if(matchIndexs.length===1){var _matchIndexs=_slicedToArray(matchIndexs,1),oldIndex=_matchIndexs[0];if(letters[oldIndex].text===letters[newIndex].text){newItems[oldIndex].matched=true;newItems[newIndex].matched=true;setMatchedCount(matchedCount+1);}setTimeout(function(){if(!newItems[oldIndex].matched&&!newItems[oldIndex].matched){newItems[oldIndex].show=false;newItems[newIndex].show=false;}setMatchedIndexs([]);setTurnsCount(turnsCount+1);setLetters(newItems);},600);}setLetters(newItems);setMatchedIndexs(matchIndexs.concat(newIndex));}};var renderItem=function renderItem(item,index){return React.createElement(TouchableOpacity,{key:item.id,onPress:function onPress(){return onClick(item,index);}},React.createElement(View,{style:styles.card},React.createElement(Text,{style:_objectSpread(_objectSpread({},styles.text),{},{opacity:item.show?1:0})},item.matched?\"ðŸ¥³\":item.text)));};var gameContainer=function gameContainer(){return React.createElement(View,{style:{display:\"flex\"}},React.createElement(View,{style:styles.topBarContainer},React.createElement(View,null,React.createElement(Text,{style:styles.counterHeading},\"MATCHES\"),React.createElement(Text,{style:styles.counterText},matchedCount)),React.createElement(View,null,React.createElement(Text,{style:styles.counterHeading},\"TURNS\"),React.createElement(Text,{style:styles.counterText},turnsCount))),React.createElement(View,{style:styles.container},letters.map(renderItem)));};var resetGame=function resetGame(){setTurnsCount(0);setMatchedCount(0);setMatchedIndexs([]);setLetters(getRandomChar());};return React.createElement(SafeAreaView,null,letters.length===matchedCount*2?React.createElement(View,{style:styles.winnerContainer},React.createElement(Text,{style:styles.winnerText},\"\\u2705 You won the game \"),React.createElement(View,{style:styles.resetGameContainer},React.createElement(Button,{onPress:resetGame,title:\"Restart Game\"}))):gameContainer());}","map":{"version":3,"sources":["C:/projects/my_projects/leap.club-android-game-assignment/src/view/app/App.js"],"names":["React","useState","TouchableOpacity","clone","getRandomChar","maxCount","styles","App","letters","setLetters","matchIndexs","setMatchedIndexs","matchedCount","setMatchedCount","turnsCount","setTurnsCount","onClick","item","newIndex","matched","length","newItems","show","oldIndex","text","setTimeout","concat","renderItem","index","id","card","opacity","gameContainer","display","topBarContainer","counterHeading","counterText","container","map","resetGame","winnerContainer","winnerText","resetGameContainer"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, SafeAreaView, Text, View } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { clone, getRandomChar, maxCount } from \"../../constants/memoryDef\";\nimport styles from \"./styles\";\n\nexport default function App() {\n  const [letters, setLetters] = useState(getRandomChar());\n  const [matchIndexs, setMatchedIndexs] = useState([]);\n  const [matchedCount, setMatchedCount] = useState(0);\n  const [turnsCount, setTurnsCount] = useState(0);\n\n  const onClick = (item, newIndex) => {\n    if (!item.matched && matchIndexs.length < 2 && newIndex != matchIndexs[0]) {\n      let newItems = matchIndexs;\n      if (matchIndexs.length < maxCount) {\n        newItems = clone(letters);\n        newItems[newIndex].show = !newItems[newIndex].show;\n      }\n\n      if (matchIndexs.length === 1) {\n        const [oldIndex] = matchIndexs;\n        if (letters[oldIndex].text === letters[newIndex].text) {\n          newItems[oldIndex].matched = true;\n          newItems[newIndex].matched = true;\n          setMatchedCount(matchedCount + 1);\n        }\n        setTimeout(() => {\n          if (!newItems[oldIndex].matched && !newItems[oldIndex].matched) {\n            newItems[oldIndex].show = false;\n            newItems[newIndex].show = false;\n          }\n          setMatchedIndexs([]);\n          setTurnsCount(turnsCount + 1);\n          setLetters(newItems);\n        }, 600);\n      }\n\n      setLetters(newItems);\n\n      setMatchedIndexs(matchIndexs.concat(newIndex));\n    }\n  };\n\n  const renderItem = (item, index) => {\n    return (\n      <TouchableOpacity key={item.id} onPress={() => onClick(item, index)}>\n        <View style={styles.card}>\n          <Text style={{ ...styles.text, opacity: item.show ? 1 : 0 }}>\n            {item.matched ? \"ðŸ¥³\" : item.text}\n          </Text>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  const gameContainer = () => {\n    return (\n      <View style={{ display: \"flex\" }}>\n        <View style={styles.topBarContainer}>\n          <View>\n            <Text style={styles.counterHeading}>MATCHES</Text>\n            <Text style={styles.counterText}>{matchedCount}</Text>\n          </View>\n          <View>\n            <Text style={styles.counterHeading}>TURNS</Text>\n            <Text style={styles.counterText}>{turnsCount}</Text>\n          </View>\n        </View>\n        <View style={styles.container}>{letters.map(renderItem)}</View>\n      </View>\n    );\n  };\n\n  const resetGame = () => {\n    setTurnsCount(0);\n    setMatchedCount(0);\n    setMatchedIndexs([]);\n    setLetters(getRandomChar());\n  };\n\n  return (\n    <SafeAreaView>\n      {letters.length === matchedCount * 2 ? (\n        <View style={styles.winnerContainer}>\n          <Text style={styles.winnerText}>âœ… You won the game </Text>\n          <View style={styles.resetGameContainer}>\n            <Button onPress={resetGame} title=\"Restart Game\" />\n          </View>\n        </View>\n      ) : (\n        gameContainer()\n      )}\n    </SafeAreaView>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}