{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var _characters=[{id:1,text:\"A\",show:false,matched:false},{id:2,text:\"B\",show:false,matched:false},{id:3,text:\"C\",show:false,matched:false},{id:4,text:\"D\",show:false,matched:false},{id:5,text:\"E\",show:false,matched:false},{id:6,text:\"F\",show:false,matched:false},{id:7,text:\"G\",show:false,matched:false},{id:8,text:\"H\",show:false,matched:false},{id:9,text:\"A\",show:false,matched:false},{id:10,text:\"B\",show:false,matched:false},{id:11,text:\"C\",show:false,matched:false},{id:12,text:\"D\",show:false,matched:false},{id:13,text:\"E\",show:false,matched:false},{id:14,text:\"F\",show:false,matched:false},{id:15,text:\"G\",show:false,matched:false},{id:16,text:\"H\",show:false,matched:false}];var clone=function clone(array){return array.map(function(item){return _objectSpread({},item);});};var _genRandomChar=function _genRandomChar(array){var clonedArray=clone(array);var currentIndex=array.length,randomIndex;while(currentIndex!=0){randomIndex=Math.floor(Math.random()*currentIndex);currentIndex--;var _ref=[clonedArray[randomIndex],clonedArray[currentIndex]];clonedArray[currentIndex]=_ref[0];clonedArray[randomIndex]=_ref[1];}return clonedArray;};var getRandomChar=function getRandomChar(){return _genRandomChar(_characters);};var maxCount=2;export{getRandomChar,maxCount,clone};","map":{"version":3,"sources":["C:/projects/my_projects/leap.club-android-game-assignment/src/constants/memoryDef.js"],"names":["_characters","id","text","show","matched","clone","array","map","item","_genRandomChar","clonedArray","currentIndex","length","randomIndex","Math","floor","random","getRandomChar","maxCount"],"mappings":"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","sourcesContent":["const _characters = [\r\n  { id: 1, text: \"A\", show: false, matched: false },\r\n  { id: 2, text: \"B\", show: false, matched: false },\r\n  { id: 3, text: \"C\", show: false, matched: false },\r\n  { id: 4, text: \"D\", show: false, matched: false },\r\n  { id: 5, text: \"E\", show: false, matched: false },\r\n  { id: 6, text: \"F\", show: false, matched: false },\r\n  { id: 7, text: \"G\", show: false, matched: false },\r\n  { id: 8, text: \"H\", show: false, matched: false },\r\n  { id: 9, text: \"A\", show: false, matched: false },\r\n  { id: 10, text: \"B\", show: false, matched: false },\r\n  { id: 11, text: \"C\", show: false, matched: false },\r\n  { id: 12, text: \"D\", show: false, matched: false },\r\n  { id: 13, text: \"E\", show: false, matched: false },\r\n  { id: 14, text: \"F\", show: false, matched: false },\r\n  { id: 15, text: \"G\", show: false, matched: false },\r\n  { id: 16, text: \"H\", show: false, matched: false },\r\n];\r\n\r\nconst clone = (array) => {\r\n  return array.map((item) => ({ ...item }));\r\n};\r\n\r\nconst _genRandomChar = (array) => {\r\n  const clonedArray = clone(array);\r\n  let currentIndex = array.length,\r\n    randomIndex;\r\n\r\n  while (currentIndex != 0) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    [clonedArray[currentIndex], clonedArray[randomIndex]] = [\r\n      clonedArray[randomIndex],\r\n      clonedArray[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return clonedArray;\r\n};\r\n\r\nconst getRandomChar = () => {\r\n  return _genRandomChar(_characters);\r\n};\r\n\r\nconst maxCount = 2;\r\nexport { getRandomChar, maxCount, clone };\r\n"]},"metadata":{},"sourceType":"module"}