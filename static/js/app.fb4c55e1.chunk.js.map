{"version":3,"sources":["src/constants/memoryDef.js","src/utils/utilityFunc.js","src/view/app/styles.js","src/view/cards/Cards.js","src/view/resetGame/ResetGame.js","index.js","src/view/app/App.js"],"names":["_characters","cloneArrayDeep","array","map","item","getRandomChar","randomIndex","clonedArray","currentIndex","length","Math","floor","random","_genRandomChar","concat","idCounter","text","id","show","matched","defIterator","getWidth","Dimensions","get","width","getHeight","height","StyleSheet","create","winnerContainer","display","alignItems","justifyContent","container","flexDirection","flexWrap","card","backgroundColor","margin","borderRadius","fontSize","color","counterText","textAlign","topBarContainer","paddingLeft","paddingRight","marginTop","StatusBar","currentHeight","marginBottom","counterHeading","fontWeight","winnerText","resetGameContainer","Cards","letters","turnsCount","matchedCount","onClick","renderItem","index","key","onPress","View","style","styles","Text","opacity","ResetGame","resetGame","Button","title","registerRootComponent","useState","setLetters","oldIndex","setMatchedIndexs","setMatchedCount","setTurnsCount","SafeAreaView","newIndex","newItems","setTimeout"],"mappings":"icAAA,IAAMA,EAAc,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAElDC,EAAiB,SAACC,GACtB,OAAOA,EAAMC,KAAI,SAACC,GAAD,O,iWAAA,IAAgBA,OAkC7BC,EAAgB,WAKpB,OApCqB,SAACH,GAKtB,IAJA,IAEEI,EAFIC,EAAW,IAAOL,GACpBM,EAAeN,EAAMO,OAGF,GAAhBD,GAAmB,CACxBF,EAAcI,KAAKC,MAAMD,KAAKE,SAAWJ,GACzCA,IAFwB,MAIgC,CACtDD,EAAYD,GACZC,EAAYC,IAFbD,EAAYC,GAJW,KAIID,EAAYD,GAJhB,KAU1B,OAAOC,EAiBYM,CAAeb,EAAYc,OAAOd,IAG5BG,IAhBP,WAClB,IAAIY,EAAY,EAGhB,OAAO,SAACX,GAAD,MAAW,CAChBY,KAAMZ,EACNa,GAAIF,IACJG,MAAM,EACNC,SAAS,IAQkBC,K,sCCvCzBC,EAAWC,IAAWC,IAAI,UAAUC,MAEpCC,EAAYH,IAAWC,IAAI,UAAUG,OCD5BC,MAAWC,OAAO,CAC/BC,gBAAiB,CACfC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBR,MAAOH,EACPK,OAAQD,GAEVQ,UAAW,CACTH,QAAS,OACTI,cAAe,MACfC,SAAU,QAEZC,KAAM,CACJZ,MAAOH,EAAW,IAClBK,OAAQD,EAAY,EACpBY,gBAAiB,UACjBL,eAAgB,SAChBD,WAAY,SACZO,OAAQ,EACRC,aAAc,GAEhBvB,KAAM,CACJwB,SAAU,GACVC,MAAO,SAETC,YAAa,CAAEC,UAAW,SAAUH,SAAqB,IAAXnB,GAC9CuB,gBAAiB,CACfd,QAAS,OACTI,cAAe,MACfF,eAAgB,gBAChBa,YAAa,GACbC,aAAc,GACdC,UAAWC,IAAUC,cAAgB,GAErCC,aAAc,IAEhBC,eAAgB,CACdC,WAAY,OACZZ,SAAqB,IAAXnB,GAEZgC,WAAY,CACVb,SAAqB,IAAXnB,GAEZiC,mBAAoB,CAAEP,UAAW,M,ikBC1CpB,SAASQ,EAAT,GAAgE,IAA/CC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,QAC3DC,EAAa,SAACxD,EAAMyD,GACxB,OACE,kBAAC,IAAD,CAAkBC,IAAK1D,EAAKa,GAAI8C,QAAS,kBAAMJ,EAAQvD,EAAMyD,KAC3D,kBAACG,EAAA,EAAD,CAAMC,MAAOC,EAAO9B,MAClB,kBAAC+B,EAAA,EAAD,CAAMF,MAAK,OAAOC,EAAOlD,MAAd,IAAoBoD,QAAShE,EAAKc,KAAO,EAAI,KACrDd,EAAKe,QAAU,eAAOf,EAAKY,SAyBtC,OAhBI,kBAACgD,EAAA,EAAD,CAAMC,MAAO,CAAEnC,QAAS,SACtB,kBAACkC,EAAA,EAAD,CAAMC,MAAOC,EAAOtB,iBAClB,kBAACoB,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAMF,MAAOC,EAAOf,gBAApB,WACA,kBAACgB,EAAA,EAAD,CAAMF,MAAOC,EAAOxB,aAAcgB,IAEpC,kBAACM,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAMF,MAAOC,EAAOf,gBAApB,SACA,kBAACgB,EAAA,EAAD,CAAMF,MAAOC,EAAOxB,aAAce,KAGtC,kBAACO,EAAA,EAAD,CAAMC,MAAOC,EAAOjC,WAAYuB,EAAQrD,IAAIyD,K,aC3BrC,SAASS,EAAT,GAAmC,IAAdC,EAAa,EAAbA,UAClC,OACE,kBAACN,EAAA,EAAD,CAAMC,MAAOC,EAAOrC,iBAClB,kBAACsC,EAAA,EAAD,CAAMF,MAAOC,EAAOb,YAApB,4BACA,kBAACW,EAAA,EAAD,CAAMC,MAAOC,EAAOZ,oBAClB,kBAACiB,EAAA,EAAD,CAAQR,QAASO,EAAWE,MAAM,mBCF1CC,aCDe,WACb,MAA8BC,mBAASrE,KAAvC,WAAOmD,EAAP,KAAgBmB,EAAhB,KACA,EAAqCD,mBAAS,MAA9C,WAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAwCH,mBAAS,GAAjD,WAAOhB,EAAP,KAAqBoB,EAArB,KACA,EAAoCJ,mBAAS,GAA7C,WAAOjB,EAAP,KAAmBsB,EAAnB,KAoCA,OACE,kBAACC,EAAA,EAAD,KACGxB,EAAQ/C,SAA0B,EAAfiD,EAClB,kBAACW,EAAD,CAAWC,UAVC,WAChBS,EAAc,GACdD,EAAgB,GAChBD,EAAiB,MACjBF,EAAWtE,QAQP,kBAACkD,EAAD,CACEC,QAASA,EACTC,WAAYA,EACZC,aAAcA,EACdC,QA3CQ,SAACvD,EAAM6E,GACrB,IAAK7E,EAAKe,SAAW8D,GAAYL,EAAU,CACzC,IAAMM,EAAWjF,EAAeuD,GAChC0B,EAASD,GAAU/D,MAAQgE,EAASD,GAAU/D,KAE9B,MAAZ0D,IACEpB,EAAQoB,GAAU5D,OAASwC,EAAQyB,GAAUjE,OAC/CkE,EAASN,GAAUzD,SAAU,EAC7B+D,EAASD,GAAU9D,SAAU,EAC7B2D,EAAgBpB,EAAe,IAEjCyB,YAAW,WACJD,EAASN,GAAUzD,SAAY+D,EAASN,GAAUzD,UACrD+D,EAASN,GAAU1D,MAAO,EAC1BgE,EAASD,GAAU/D,MAAO,GAE5B2D,EAAiB,MACjBE,EAActB,EAAa,GAC3BkB,EAAWO,KACV,MAGLP,EAAWO,GACXL,EAAiBI,a","file":"static/js/app.fb4c55e1.chunk.js","sourcesContent":["const _characters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"];\r\n\r\nconst cloneArrayDeep = (array) => {\r\n  return array.map((item) => ({ ...item }));\r\n};\r\n\r\nconst _genRandomChar = (array) => {\r\n  const clonedArray = [...array];\r\n  let currentIndex = array.length,\r\n    randomIndex;\r\n\r\n  while (currentIndex != 0) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    [clonedArray[currentIndex], clonedArray[randomIndex]] = [\r\n      clonedArray[randomIndex],\r\n      clonedArray[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return clonedArray;\r\n};\r\n\r\n// Return map for each item\r\nconst defIterator = () => {\r\n  let idCounter = 0;\r\n\r\n  // generate new default keys map\r\n  return (item) => ({\r\n    text: item,\r\n    id: idCounter++,\r\n    show: false,\r\n    matched: false,\r\n  });\r\n};\r\n\r\nconst getRandomChar = () => {\r\n  const randomChar = _genRandomChar(_characters.concat(_characters));\r\n\r\n  // generate id and add default fields\r\n  const final = randomChar.map(defIterator());\r\n  return final;\r\n};\r\n\r\nconst maxCount = 2;\r\nexport { getRandomChar, maxCount, cloneArrayDeep };\r\n","import { Dimensions } from \"react-native\";\r\n\r\nconst getWidth = Dimensions.get(\"window\").width;\r\n\r\nconst getHeight = Dimensions.get(\"window\").height;\r\n\r\nexport { getWidth, getHeight };\r\n","import { StatusBar, StyleSheet } from \"react-native\";\r\nimport { getHeight, getWidth } from \"../../utils/utilityFunc\";\r\n\r\nexport default StyleSheet.create({\r\n  winnerContainer: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    width: getWidth,\r\n    height: getHeight,\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  card: {\r\n    width: getWidth / 4.5,\r\n    height: getHeight / 5,\r\n    backgroundColor: \"#C216F5\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    margin: 5,\r\n    borderRadius: 5,\r\n  },\r\n  text: {\r\n    fontSize: 50,\r\n    color: \"white\",\r\n  },\r\n  counterText: { textAlign: \"center\", fontSize: getWidth * 0.05 },\r\n  topBarContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    paddingLeft: 10,\r\n    paddingRight: 10,\r\n    marginTop: StatusBar.currentHeight + 10,\r\n\r\n    marginBottom: 20,\r\n  },\r\n  counterHeading: {\r\n    fontWeight: \"bold\",\r\n    fontSize: getWidth * 0.04,\r\n  },\r\n  winnerText: {\r\n    fontSize: getWidth * 0.09,\r\n  },\r\n  resetGameContainer: { marginTop: 20 },\r\n});\r\n","import React from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport styles from \"../app/styles\";\r\n\r\nexport default function Cards({ letters, turnsCount, matchedCount, onClick }) {\r\n  const renderItem = (item, index) => {\r\n    return (\r\n      <TouchableOpacity key={item.id} onPress={() => onClick(item, index)}>\r\n        <View style={styles.card}>\r\n          <Text style={{ ...styles.text, opacity: item.show ? 1 : 0 }}>\r\n            {item.matched ? \"ðŸ¥³\" : item.text}\r\n          </Text>\r\n        </View>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  const gameContainer = () => {\r\n    return (\r\n      <View style={{ display: \"flex\" }}>\r\n        <View style={styles.topBarContainer}>\r\n          <View>\r\n            <Text style={styles.counterHeading}>MATCHES</Text>\r\n            <Text style={styles.counterText}>{matchedCount}</Text>\r\n          </View>\r\n          <View>\r\n            <Text style={styles.counterHeading}>TURNS</Text>\r\n            <Text style={styles.counterText}>{turnsCount}</Text>\r\n          </View>\r\n        </View>\r\n        <View style={styles.container}>{letters.map(renderItem)}</View>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  return gameContainer();\r\n}\r\n","import React from \"react\";\r\nimport { Button, Text, View } from \"react-native\";\r\nimport styles from \"../app/styles\";\r\n\r\nexport default function ResetGame({ resetGame }) {\r\n  return (\r\n    <View style={styles.winnerContainer}>\r\n      <Text style={styles.winnerText}>âœ… You won the game </Text>\r\n      <View style={styles.resetGameContainer}>\r\n        <Button onPress={resetGame} title=\"Restart Game\" />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n","import { registerRootComponent } from \"expo\";\r\nimport \"react-native-gesture-handler\";\r\nimport App from \"./src/view/app/App\";\r\n\r\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\r\n// It also ensures that whether you load the app in Expo Go or in a native build,\r\n// the environment is set up appropriately\r\nregisterRootComponent(App);\r\n","import React, { useState } from \"react\";\r\nimport { SafeAreaView } from \"react-native\";\r\nimport { cloneArrayDeep, getRandomChar } from \"../../constants/memoryDef\";\r\nimport Cards from \"../cards/Cards\";\r\nimport ResetGame from \"../resetGame/ResetGame\";\r\n\r\nexport default function App() {\r\n  const [letters, setLetters] = useState(getRandomChar());\r\n  const [oldIndex, setMatchedIndexs] = useState(null);\r\n  const [matchedCount, setMatchedCount] = useState(0);\r\n  const [turnsCount, setTurnsCount] = useState(0);\r\n\r\n  const onClick = (item, newIndex) => {\r\n    if (!item.matched && newIndex != oldIndex) {\r\n      const newItems = cloneArrayDeep(letters);\r\n      newItems[newIndex].show = !newItems[newIndex].show;\r\n\r\n      if (oldIndex != null) {\r\n        if (letters[oldIndex].text === letters[newIndex].text) {\r\n          newItems[oldIndex].matched = true;\r\n          newItems[newIndex].matched = true;\r\n          setMatchedCount(matchedCount + 1);\r\n        }\r\n        setTimeout(() => {\r\n          if (!newItems[oldIndex].matched && !newItems[oldIndex].matched) {\r\n            newItems[oldIndex].show = false;\r\n            newItems[newIndex].show = false;\r\n          }\r\n          setMatchedIndexs(null);\r\n          setTurnsCount(turnsCount + 1);\r\n          setLetters(newItems);\r\n        }, 600);\r\n      }\r\n\r\n      setLetters(newItems);\r\n      setMatchedIndexs(newIndex);\r\n    }\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setTurnsCount(0);\r\n    setMatchedCount(0);\r\n    setMatchedIndexs(null);\r\n    setLetters(getRandomChar());\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView>\r\n      {letters.length === matchedCount * 2 ? (\r\n        <ResetGame resetGame={resetGame} />\r\n      ) : (\r\n        <Cards\r\n          letters={letters}\r\n          turnsCount={turnsCount}\r\n          matchedCount={matchedCount}\r\n          onClick={onClick}\r\n        />\r\n      )}\r\n    </SafeAreaView>\r\n  );\r\n}\r\n"],"sourceRoot":""}